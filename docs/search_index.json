[
["index.html", "R Markdown for Psychology Graduate Students Chapter 1 Welcome 1.1 Background 1.2 Getting started", " R Markdown for Psychology Graduate Students Holly Zaharchuk 2020-04-28 Chapter 1 Welcome I designed this guide to be a resource for psychology graduate students looking to streamline their research pipelines. With R Markdown, you can load, clean, manipulate, analyze, and present your data in one environment. This guide focuses on the presentation piece, with information on creating slides, posters, manuscripts, CVs, and reports in several formats, including HTML, PDF, and Microsoft Word. 1.1 Background This guide assumes a basic level of familiarity with R and RStudio. If you don’t know how to use either of these, there are several beginner tutorials you should check out first. I have also created primers for Beginner and Intermediate R in Chapter 8. 1.2 Getting started What is R Markdown? Markdown is a specific markup language with plain text-formatting syntax. R Markdown is a specific markdown variety. R Markdown and R are not the same thing! R Markdown combines R code (or code from other programming languages) and markdown in the RStudio integrated development environment (IDE). This allows you to embed code and text in the same document. You can install the R Markdown package from CRAN or GitHub: install.packages(&quot;rmarkdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/rmarkdown&quot;) "],
["intro.html", "Chapter 2 Parts of a document 2.1 YAML header 2.2 Markdown 2.3 Code chunks", " Chapter 2 Parts of a document YAML header Markdown Code chunks 2.1 YAML header The first part of your document is called the YAML header. Here is where you set the global options for the output and formatting. In the example below, I show the YAML header for a set of revealjs slides (see Chapter 4 for more on creating slides with this and other packages). I’ve included basic information, like the title and date, in addition to template-specific parameters, like whether there should be slide numbers or not. Section 5.2 has more information on setting YAML formatting parameters. 2.2 Markdown The plain text-formatting syntax of R Markdown allows for conversion to multiple document types. This R Markdown cheatsheet provides an overview of the plain text syntax. The image below also shows an example of the basic syntax. # denotes a header, with ## denoting a subheader and so on, while numbers will function like you would expect a numbered list to behave in Word. However, the actual numbers don’t matter; I could’ve put all 1’s here, and R Markdown would’ve formatted them for me. 2.3 Code chunks Code chunks are one of the core features of R Markdown. Code chunks are set apart by three backticks. In curly brackets, you must specify the coding language you want to use (here, it’s R). You can add other arguments, like a name for the chunk (here, it’s “setup”), or other chunk options (like “echo = FALSE” to prevent the code from appearing in the document). You can find a full list of chunk options here. # This is a chunk of R code that adds an image knitr::include_graphics(&quot;images/example_chunk.png&quot;) Tip: you can use the chunk option “cache = TRUE” for very time-consuming chunks, but there are some catches as described here. "],
["output.html", "Chapter 3 Outputs 3.1 Output options 3.2 Output templates 3.3 Rendering options 3.4 Knitting process", " Chapter 3 Outputs R Markdown can transform plain text and code into several different document formats. 3.1 Output options HTML is overall the most flexible. It supports the types of content we’re interested in creating as graduate students—tables, graphs, and the like—and you can easily transform your HTML output to a PDF with pagedown::chrome_print(file) if you have Google Chrome. The poster template I use follows this process. If you’re familiar with \\(\\LaTeX\\), you may be inclined to output directly to a PDF, since you can include inline \\(\\LaTeX\\) code in your documents (more on this in Chapter 5). The CV and manuscript templates that I use rely on the fine-grained typsetting capabilities of \\(\\LaTeX\\). To create a PDF, you need to have \\(\\LaTeX\\) installed locally. If you don’t already, you can install the lightweight tinytex distribution through the R console. install.packages(&quot;tinytex&quot;) You can also output to Microsoft Word and Powerpoint. I often work with colleagues who prefer to edit in Word, so sometimes I need to do this. I prefer not to if I can help it though, because you lose several important functions. For example, chunk options for aligning and setting the size of graphs and other images don’t work, and kable tables tend not to appear correctly. 3.2 Output templates You can find information on output templates in Chapter 4. 3.3 Rendering options You can specify a particular output type in the YAML header with the output option. Then, you can press the Knit button or command/CTRL + shift + K to create or “knit” the document. Be sure to pay attention to indentation and colon placement in your YAML header, especially as you start to specify options for particular output types. As a rule of thumb, if you have anything more than output: output_type, you need to indent every new line, and have a colon at the end of the previous line. See Section @ref(use_def) for an example of this. Instead of knitting, you can also render files in console with rmarkdown::render(file, output_format). This is essentially what Knit is doing. This approach allows you to create multiple output types quickly and easily. In my experience, I’m usually customizing my output very specifically for one output type by adding in-line CSS or \\(\\LaTeX\\) code, so I tend not to do this. 3.4 Knitting process When you Knit or render your document, there’s a particular sequence of events that happens under the hood. Your R Markdown document is piped through to pandoc by the knitr package, which runs your code chunks and knits them together with the plain text you’ve included. Pandoc ultimately handles the conversion to a particular output format. Understanding this process can help you trouble-shoot when you run into issues. You can find more on trouble-shooting in Chapter 6. Knitting process from Writing Your Thesis with R Markdown "],
["template.html", "Chapter 4 Templates 4.1 Built-in templates 4.2 Templates from R packages 4.3 User-defined templates", " Chapter 4 Templates Built-in templates Templates from R packages User-defined templates 4.1 Built-in templates R Markdown has several output templates built in, and you just have to specify them in the YAML output. These include: Presentations ioslides and Slidy for HTML Beamer for PDF Interactive Shiny documents and presentations 4.2 Templates from R packages You can also download specific templates from CRAN and GitHub. A few that I’ve used or played with include: Presentations: revealjs CVs: vitae Academic posters: posterdown APA articles: papaja Journal templates: rticles HTML theme: prettydoc 4.3 User-defined templates There are also ways to include templates for particular outputs in the YAML header. For PDFs, you can include \\(\\LaTeX\\) templates, but you need to pay attention to the use of $. The PLOS template shown in the image below failed to compile when I first downloaded it, because $ are special characters for pandoc. After I added a second $ throughout the document (you just use find and replace for this), it worked. If you’re having issues, usually someone else on Google has also had that issue. You can also set up Word document templates. To do this, you need to use the Styles Pane. Highlight the text you want to format, make the desired changes, then find the style that applies to that section, and find “Update to Match Selection” in the dropdown menu. In the example below, you can see that I’m editing the “Title” format, so I need to update that particular entry in the Styles Pane. You have to do this for every text element in the document, but once you’ve set it up once this way, you can simply include it the same way as the \\(\\LaTeX\\) template shown above. "],
["format.html", "Chapter 5 Formatting 5.1 YAML parameters 5.2 YAML references 5.3 In-line code 5.4 Editing templates", " Chapter 5 Formatting YAML parameters and references Inline \\(\\LaTeX\\) and CSS code Custom edits to templates 5.1 YAML parameters There are several general YAML parameters that you can include in the YAML header to format your document. There are also template-specific parameters, but you’ll need to look at the specific package documentation to know what these are. 5.2 YAML references In your YAML header, you can also reference other documents for formatting and content. The most common ones I use are .bib and .csl files for citing and formatting references, respectively, in manuscripts and reports. These files all go in the same directory as your .Rmd file. Bibliography: .bib (I use BibDesk for my reference manager) Citation style language files: .csl My CV repo has a customized APA 6 .csl file for arranging references in descending order by date My Psychonomics poster repo also has a customized APA 6 .csl to fix some small bugs \\(\\LaTeX\\) styling: .cls HTML styling: .css Interacting with pandoc: .lua Download this .lua file to use multiple bibliographies in one document, as I do in my CV (one for publications, another for conference presentations) Follow these instructions for accessing the .lua file for properly formatting in-text references (pandoc defaults to using ampersands where APA requires “and”) See the following example for including both of these .lua filters in one document Below, I’ve included an example from my CV with both template-specific YAML parameters and references. 5.3 In-line code R Markdown supports in-line code for custom formatting. In PDFs, you can use \\(\\LaTeX\\) code, type-setting commands (e.g., \\vspace{12pt}), and call specific packages. There are useful lists of symbols here and here. In HTML documents, you can include CSS commands. 5.3.1 \\(\\LaTeX\\) I’ve included examples of calling packages in the YAML header and using inline functions from my statistics homework below (also see Writing Your Thesis with R Markdown). 5.3.2 CSS/HTML Here are some examples of using CSS from my Psychonomics poster. 5.4 Editing templates To make extremely custom edits to templates, sometimes you have to edit the template documents directly: Find out where your computer stores your R packages and edit the template there If the template generates a style document (e.g., .cls) in the directory with your .Rmd file, you can usually edit that without going to the package 5.4.1 Package documents # Make dataframe with installed packages pkgs &lt;- installed.packages() %&gt;% as.data.frame() # Pull posterdown package pstr &lt;- pkgs %&gt;% select(Package, LibPath, Version, Depends, Imports) %&gt;% dplyr::filter(Package == &quot;posterdown&quot;) # Make table kable(pstr) %&gt;% kable_styling(bootstrap_options = &quot;condensed&quot;, font_size = 18) Package LibPath Version Depends Imports posterdown /Library/Frameworks/R.framework/Versions/3.5/Resources/library 1.0 NA pagedown, rmarkdown, yaml To edit package documents once you’ve located them, you should proceed with caution: Save the original template and move it to a different location Make one change at a time Name the updated template with the same name in the same place as the original 5.4.2 Directory documents Some templates output formatting documents in your working directory. These are easier to access and edit. For example, knitting the vitae::awesomecv template created a .cls file that I could edit to change font sizes/colors. "],
["trouble.html", "Chapter 6 Trouble-shooting 6.1 Identifying issues 6.2 Tips", " Chapter 6 Trouble-shooting 6.1 Identifying issues Warnings vs. errors Console vs. chunk Markdown environment vs. R environment Package specification :: for unloaded packages and conflicting functions 6.1.1 Warnings Warnings won’t stop your document from compiling, but generally indicate that you should change something in your code. 6.1.2 Errors There are different kinds of errors that you can encounter. In general, you can distinguish chunk errors from R Markdown errors by their appearance. Errors will usually tell you which line of the document they’re in, but sometimes this can be misleading, so try to understand the error message first before going to look for the source. As always, Google and Stack Overflow are your friends! Chunk error R Markdown error 6.1.3 R code and environments Running a chunk executes the code in the console and adds the output to your R environment; however, your R environment is separate from the environment created when knitting a document. If you’re getting an error message that says a particular variable or package doesn’t exist when it’s loaded in your R environment, it’s usually because you haven’t included it in a previous chunk. # Define new variable y y &lt;- 100 # When I run this chunk, I get the expected output (150), # but it fails when I try to knit the document print(x + y) 6.1.4 Packages If a function you want to use isn’t included in base R, you need to load the package that it’s in (e.g., using library(package)). If you don’t want to load a whole package, you can use this notation: package::function. This tells R which package to look in. You especially want to do this if there are what are called “namespace conflicts,” where multiple packages have the same function name. I often run into this issue with the filter function from dplyr, so I always specify dplyr::filter even if I’ve loaded dplyr. 6.2 Tips Clear all variables: rm(ls = list()) Restart R environment: control/CTRL + fn + shift + F10 Run all chunks individually in order before compiling to test code Search for information Use Help window Search for package in console with ?package or ??package Google package and error "],
["tips-1.html", "Chapter 7 Tips 7.1 Keys to success 7.2 General information 7.3 Reference documents 7.4 Other packages/tools 7.5 Updating software/packages", " Chapter 7 Tips 7.1 Keys to success Treat your data as read-only Comment code early and often Keep code chunks small Label chunks for diagnosing issues Nest all files under one directory (if possible) 7.2 General information Escape characters with a backslash \\ (this also applies to any chunk output containing strings) Call R objects and functions in markdown/YAML by ~sandwiching~ with backticks `` Automatic bracket/quote/asterisk wrapping Dollar signs for \\(\\LaTeX\\) math mode (but also be careful with pandoc) Line spacing matters in markdown 7.3 Reference documents R Markdown Guide R Markdown Cheat Sheet R Markdown Reference Guide Keyboard shortcuts knitr documentation 7.4 Other packages/tools Sublime Text text editor scholar package for automatically downloading citations from Google Scholar devtools package for installing packages/plug-ins from GitHub (e.g., papaja) wordcountaddin plug-in for checking word count and readability 7.5 Updating software/packages Update your TeX distribution from the command line Update all packages (including rmarkdown) in library with update.packages(path) Update individual packages by reinstalling with install.packages(package) Update R in the console with updateR package Redownload RStudio to update "],
["supplement.html", "Chapter 8 Supplementary materials 8.1 Beginner R 8.2 Intermediate R 8.3 Practice materials", " Chapter 8 Supplementary materials 8.1 Beginner R Basic R functionality Reading in data Tidy R philosophy Manipulating data with core tidyr functions 8.1.1 Basic R functionality Variables Functions Operators 8.1.2 Variables The way R stores your information will determine the kinds of functions/operators you can use Data: dataframes Values: lists, vectors, matrices, etc. # Variables can be numbers, strings, etc. some_val &lt;- 200 other_val &lt;- TRUE # Variables can also be lists of numbers, strings, etc. a_list &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # We can also make dataframes (which are essentially special lists) a_dataframe &lt;- tibble(column_1 = 1:3, column_2 = a_list) 8.1.3 Functions Functions take a certain number and certain types of “arguments” base R functions: part of downloading R Packages: need to be installed, then loaded install.packages(package) once (or to update package) library(package) every R session Use Help window or ?package to check argument names, types, and defaults Named arguments without values are required (and user-defined) Named arguments with values show defaults Elipses mean that you can add other optional arguments # file: required # header = TRUE: default # ...: other potential arguments, like stringsAsFactors = FALSE read.csv(file, header = TRUE, sep = &quot;,&quot;, quote = &quot;\\&quot;&quot;, dec = &quot;.&quot;, fill = TRUE, comment.char = &quot;&quot;, ...) 8.1.4 base R # base R function # Count the number of rows in this dataframe nrow(a_dataframe) ## [1] 3 # If I give nrow() too many arguments, it will throw an error nrow(a_dataframe, a_list) # If I give it the wrong kind of argument, it will just return NULL # Some functions won&#39;t run at all with wrong kind of argument nrow(a_list) ## NULL 8.1.5 Packages # scholar package library(scholar) # get_publications function # Pull publications from Google Scholar for Marie Curie get_publications(&quot;EmD_lTEAAAAJ&amp;EmD_lTEAAAAJ&amp;&quot;) %&gt;% dplyr::filter(cites &gt; 30) %&gt;% distinct(title, .keep_all = TRUE) %&gt;% select(author, title) %&gt;% head(2) %&gt;% kable() author title P Curie, M Sklodowska-Curie Sur une substance nouvelle radio-active, contenue dans la pechblende E Curie Madame Curie: a biography 8.1.6 Operators Relational: &gt;, &lt;, ==, !=, &lt;=, &gt;= is.na(), exists(), etc. will return TRUE/FALSE values grep(), filter(), str_detect(), etc. use TRUE/FALSE values Logical: !, &amp;, &amp;&amp;, |, || Arithmetic 8.1.7 Reading in data General parameters for csv files read.csv(&quot;file_name.csv&quot;, header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, na.strings = &quot;&quot;) Avoid special characters (including spaces) in file names, directories, and column headers! readxl package for Excel spreadsheets APIs for direct access to online data qualtRics package for Qualtrics data ggmap package for Google services (geolocation data) read_table() from readr package for text files 8.1.8 Tidy R philosophy One variable per column One observation per row 8.1.9 Manipulating data with tidyr %&gt;%: pass the results of one function on to another select(): choose columns by name mutate(): add/change columns filter(): filter for (or out) rows group_by() and summarise(): perform operations on groups of data gather() and spread() pivot_longer() and pivot_wider(): condense multiple columns into one or the inverse separate() and unite(): split a column into multiple or the inverse 8.1.10 Other helpful tidyr functions slice(): choose a row pull(): choose a column Helper functions for select() (e.g., contains()) join family of functions: combine datasets based on a shared unique identifier union(): combine datasets by rows (column names must be the same) replace_na()/drop_na(): alter/remove rows with NA values 8.1.11 Helpful base R functions rbind() and cbind(): add rows/columns nrow() and ncol(): count rows/columns unique(): pull unique values Indexing with var$column and var[row, column] which() with column/row indexing 8.1.12 Other packages and functions tibble package for dataframes with tibble() kableExtra() for kable() tables ggplot2 package for graphs (cheat sheet here) factor() for ordering text labels in graphs Use na.rm = TRUE argument (e.g., in mean()) to remove NA values from calculations 8.2 Intermediate R Dealing with free-response text Dynamic variable creation and reference Helpful functions Other tips 8.2.1 Free-response text Regular expressions (cheat sheet here) Pattern matching Return position/value of elements that match a pattern: grep(), agrep() Return TRUE/FALSE: grepl(), agrepl(), str_detect() Change a pattern: sub(), gsub(), replace() Return position of pattern for all elements: regexpr(), gregexpr(), regexec() Use perl = TRUE argument to handle especially complex patterns # List of elements fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pinapple&quot;) # grep position grep(pattern = &quot;le&quot;, x = fruit) ## [1] 1 4 # grep value grep(pattern = &quot;le&quot;, x = fruit, value = TRUE) ## [1] &quot;apple&quot; &quot;pinapple&quot; # agrep (can also specify value = TRUE) agrep(pattern = &quot;le&quot;, x = fruit, max.distance = 0.1) ## [1] 1 3 4 # regexpr # match.length attribute gives starting position of match # index.type attribute gives length of matched text regexpr(pattern = &quot;le&quot;, text = fruit) ## [1] 4 -1 -1 7 ## attr(,&quot;match.length&quot;) ## [1] 2 -1 -1 2 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE 8.2.2 Dynamic variables # Variables vals &lt;- rep(1:3, 3) name &lt;- &quot;assign_example&quot; # Assign values to variable name assign(name, vals) # Use the variable as usual assign_example ## [1] 1 2 3 1 2 3 1 2 3 # You can also get the new variable from the name get(name) ## [1] 1 2 3 1 2 3 1 2 3 # You can add to this variable dynamically as well assign(name, c(get(name), 4:6)) # New output assign_example ## [1] 1 2 3 1 2 3 1 2 3 4 5 6 8.2.3 Helpful functions apply(), lapply(), sapply(), tapply() source() variables from R scripts %notin% and %in% (compared to != and ==) # Example using apply(): go across columns of dataset # and substitute characters language &lt;- apply(language, 2, function(x) gsub(&quot;\\\\\\\\&quot;, &quot;&quot;, x, fixed = TRUE)) # Source other sripts source(&quot;data_cleaning.R&quot;, local = TRUE) # Helper function &quot;%notin%&quot; &lt;- Negate(&quot;%in%&quot;) # Example from processing pipeline for Qualtrics data unusable &lt;- c(&quot;0&quot;,&quot;00&quot;,&quot;107&quot;) dat %&gt;% dplyr::filter(Progress==100 &amp; ID %notin% unusable) 8.2.4 Other tips Store ggplot2 parameters in a list() list() vs. c() 8.3 Practice materials You can find practice materials for R Markdown and R here. You’ll want to clone this repository or download the following documents/folders: brownbag_activity.Rmd data_cleaning.R apa.csl /data "]
]
