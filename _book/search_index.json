[
["index.html", "R Markdown for Psychology Graduate Students Chapter 1 Welcome 1.1 Background 1.2 Getting started", " R Markdown for Psychology Graduate Students Holly Zaharchuk 2020-04-26 Chapter 1 Welcome I designed this guide to be a resource for psychology graduate students looking to streamline their research pipelines. With R Markdown, you can load, clean, manipulate, analyze, and present your data in one environment. This guide focuses on the presentation piece, with information on creating slides, posters, manuscripts, CVs, and reports in several formats, including HTML, PDF, and Microsoft Word. 1.1 Background This guide assumes a basic level of familiarity with R and RStudio. If you don’t know how to use either of these, there are several beginner tutorials you should check out first. I have also included primers for Beginner and Intermediate R in Chapter 9. 1.2 Getting started What is R Markdown? Markdown is a specific markup language with plain-text-formatting syntax R Markdown is a kind of markdown document R Markdown combines R code (and code from other programming languages) and markdown in the RStudio integrated development environment (IDE) R Markdown and R are not the same thing You can install the R Markdown package from CRAN or GitHub: install.packages(&quot;rmarkdown&quot;) # or the development version # devtools::install_github(&quot;rstudio/rmarkdown&quot;) "],
["intro.html", "Chapter 2 Parts of a document 2.1 YAML header 2.2 Markdown 2.3 Code chunks", " Chapter 2 Parts of a document YAML header Markdown Code chunks 2.1 YAML header The first part of your document is called the YAML header. Here is where you set the global options for the output and formatting. 2.2 Markdown Plain-text-formatting syntax allows for conversion to multiple document types 2.3 Code chunks # This is a chunk of R code that adds an image knitr::include_graphics(&quot;images/example_chunk.png&quot;) "],
["creating-output.html", "Chapter 3 Creating output 3.1 Output types 3.2 YAML specification 3.3 Render", " Chapter 3 Creating output Options for creating output Specify output type with YAML header and “knit” Render with R command Processing flow: Rmd &gt; knitr &gt; md &gt; pandoc &gt; output Deep dive on relations among different aspects of R Markdown documents 3.1 Output types PDF: requires \\(\\LaTeX\\) to compile (TinyTeX distribution) HTML Microsoft Office (Word/Powerpoint) 3.2 YAML specification Use output argument in YAML header Pay attention to indentation and colons Press knit button or command/CTRL + shift + K 3.3 Render Render files in the console with rmarkdown::render(file, output_format) (this is what knit is doing) Option to create PDF from HTML with pagedown::chrome_print(file) "],
["templates.html", "Chapter 4 Templates 4.1 Built-in templates 4.2 R packages 4.3 User-defined templates 4.4 User-defined templates", " Chapter 4 Templates Built-in templates Templates from R packages User-defined templates 4.1 Built-in templates Presentations ioslides and Slidy for HTML Beamer for PDF Shiny documents and presentations (interactive) 4.2 R packages Presentations: revealjs CVs: vitae Academic posters: posterdown APA articles: papaja Journal templates: rticles HTML theme: prettydoc 4.3 User-defined templates \\(\\LaTeX\\) templates (pay attention to $ in templates) 4.4 User-defined templates Word Document: use the Styles Pane and “Update to Match Selection” "],
["formatting.html", "Chapter 5 Formatting 5.1 YAML parameters 5.2 YAML references 5.3 YAML references 5.4 Inline \\(\\LaTeX\\) and CSS code 5.5 \\(\\LaTeX\\) 5.6 CSS/HTML 5.7 Editing templates 5.8 Package documents 5.9 Package documents 5.10 Directory documents", " Chapter 5 Formatting YAML parameters and references Inline \\(\\LaTeX\\) and CSS code Custom edits to templates 5.1 YAML parameters General YAML parameters Template-specific parameters (look at package documentation) 5.2 YAML references These files go in the same place as your .Rmd Bibliography: .bib (I use BibDesk for my reference manager) Citation style language files: .csl (see my CV and Psychonomics poster repos for customized APA 6 files) \\(\\LaTeX\\) styling: .cls HTML styling: .css Interacting with pandoc: .lua (multiple bibliographies) 5.3 YAML references Example from my CV with both template-specific YAML parameters and YAML references 5.4 Inline \\(\\LaTeX\\) and CSS code \\(\\LaTeX\\) with PDFs Calling \\(\\LaTeX\\) packages Using symbols: useful lists here and here Using type-setting commands (e.g., \\vspace{12pt}) CSS with HTML 5.5 \\(\\LaTeX\\) Examples of calling packages in the YAML header and using inline functions from my stats homework (also see Writing Your Thesis with R Markdown) Stats homework output 5.6 CSS/HTML Examples from my Psychonomics poster 5.7 Editing templates To make extremely custom edits to templates, sometimes you have to edit the template documents Find out where your computer stores your R packages and edit the template there If the template generates a style document (e.g., .cls) in the directory with your .Rmd file, you can usually edit that without going to the package 5.8 Package documents # Make dataframe with installed packages pkgs &lt;- installed.packages() %&gt;% as.data.frame() # Pull posterdown package pstr &lt;- pkgs %&gt;% select(Package, LibPath, Version, Depends, Imports) %&gt;% dplyr::filter(Package == &quot;posterdown&quot;) # Make table kable(pstr) %&gt;% kable_styling(bootstrap_options = &quot;condensed&quot;, font_size = 18) Package LibPath Version Depends Imports posterdown /Library/Frameworks/R.framework/Versions/3.5/Resources/library 1.0 NA pagedown, rmarkdown, yaml 5.9 Package documents Save the original template and move it to a different location Make one change at a time Name the updated template with the same name in the same place as the original 5.10 Directory documents Knitting the vitae::awesomecv template created a .cls file that I could edit to change font sizes/colors "],
["markup.html", "Chapter 6 Markup", " Chapter 6 Markup "],
["trouble-shooting.html", "Chapter 7 Trouble-shooting 7.1 Identifying issues 7.2 Warnings 7.3 Errors 7.4 R code and environments 7.5 R code and environments 7.6 Tips", " Chapter 7 Trouble-shooting 7.1 Identifying issues Warnings vs. errors Console vs. chunk Markdown environment vs. R environment Package specification :: for unloaded packages and conflicting functions 7.2 Warnings Warnings won’t stop your document from compiling, but generally indicate that you should change something in your code 7.3 Errors Chunk error 7.4 R code and environments Running a chunk executes the code in the console and adds the output to your R environment; however, your R environment is separate from the environment created when “knitting” a document 7.5 R code and environments # Define new variable y y &lt;- 100 # When I run this chunk, I get the expected output (150), # but it fails when I try to knit the document print(x + y) 7.6 Tips Clear all variables: rm(ls = list()) Restart R environment: control/CTRL + fn + shift + F10 Run all chunks individually in order before compiling to test code Search for information Use Help window Search for package in console with ?package Google package and error Stack Overflow is your friend! "],
["tips-1.html", "Chapter 8 Tips 8.1 Keys to success 8.2 General information 8.3 Reference documents 8.4 Other packages/tools 8.5 Updating software/packages", " Chapter 8 Tips 8.1 Keys to success Treat your data as read-only Comment code early and often Keep code chunks small Label chunks for diagnosing issues Nest all files under one directory (if possible) 8.2 General information Escape characters with a backslash \\ (this also applies to any chunk output containing strings) Call R objects and functions in markdown/YAML by ~sandwiching~ with backticks `` Automatic bracket/quote/asterisk wrapping Dollar signs for \\(\\LaTeX\\) math mode (but also be careful with pandoc) Line spacing matters in markdown 8.3 Reference documents R Markdown Guide R Markdown Cheat Sheet R Markdown Reference Guide Keyboard shortcuts knitr documentation 8.4 Other packages/tools Sublime Text text editor scholar package for automatically downloading citations from Google Scholar devtools package for installing packages/plug-ins from GitHub (e.g., papaja) wordcountaddin plug-in for checking word count and readability 8.5 Updating software/packages Update your TeX distribution from the command line Update all packages (including rmarkdown) in library with update.packages(path) Update individual packages by reinstalling with install.packages(package) Update R in the console with updateR package Redownload RStudio to update "],
["supplement.html", "Chapter 9 Supplementary materials 9.1 Beginner R 9.2 Intermediate R", " Chapter 9 Supplementary materials 9.1 Beginner R Basic R functionality Reading in data Tidy R philosophy Manipulating data with core tidyr functions 9.1.1 Basic R functionality Variables Functions Operators 9.1.2 Variables The way R stores your information will determine the kinds of functions/operators you can use Data: dataframes Values: lists, vectors, matrices, etc. # Variables can be numbers, strings, etc. some_val &lt;- 200 other_val &lt;- TRUE # Variables can also be lists of numbers, strings, etc. a_list &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;) # We can also make dataframes (which are essentially special lists) a_dataframe &lt;- tibble(column_1 = 1:3, column_2 = a_list) 9.1.3 Functions Functions take a certain number and certain types of “arguments” base R functions: part of downloading R Packages: need to be installed, then loaded install.packages(package) once (or to update package) library(package) every R session 9.1.4 Functions Use Help window or ?package to check argument names, types, and defaults Named arguments without values are required (and user-defined) Named arguments with values show defaults Elipses mean that you can add other optional arguments # file: required # header = TRUE: default # ...: other potential arguments, like stringsAsFactors = FALSE read.csv(file, header = TRUE, sep = &quot;,&quot;, quote = &quot;\\&quot;&quot;, dec = &quot;.&quot;, fill = TRUE, comment.char = &quot;&quot;, ...) 9.1.5 base R # base R function # Count the number of rows in this dataframe nrow(a_dataframe) ## [1] 3 # If I give nrow() too many arguments, it will throw an error nrow(a_dataframe, a_list) # If I give it the wrong kind of argument, it will just return NULL # Some functions won&#39;t run at all with wrong kind of argument nrow(a_list) ## NULL 9.1.6 Packages # scholar package library(scholar) # get_publications function # Pull publications from Google Scholar for Marie Curie get_publications(&quot;EmD_lTEAAAAJ&amp;EmD_lTEAAAAJ&amp;&quot;) %&gt;% dplyr::filter(cites &gt; 30) %&gt;% distinct(title, .keep_all = TRUE) %&gt;% select(author, title) %&gt;% head(2) %&gt;% kable() author title P Curie, M Sklodowska-Curie Sur une substance nouvelle radio-active, contenue dans la pechblende E Curie Madame Curie: a biography 9.1.7 Operators Relational: &gt;, &lt;, ==, !=, &lt;=, &gt;= is.na(), exists(), etc. will return TRUE/FALSE values grep(), filter(), str_detect(), etc. use TRUE/FALSE values Logical: !, &amp;, &amp;&amp;, |, || Arithmetic 9.1.8 Reading in data General parameters for csv files read.csv(&quot;file_name.csv&quot;, header = TRUE, stringsAsFactors = FALSE, check.names = FALSE, na.strings = &quot;&quot;) Avoid special characters (including spaces) in file names, directories, and column headers! 9.1.9 Reading in data readxl package for Excel spreadsheets APIs for direct access to online data qualtRics package for Qualtrics data ggmap package for Google services (geolocation data) read_table() from readr package for text files 9.1.10 Tidy R philosophy One variable per column One observation per row 9.1.11 Manipulating data with tidyr %&gt;%: pass the results of one function on to another select(): choose columns by name mutate(): add/change columns filter(): filter for (or out) rows group_by() and summarise(): perform operations on groups of data gather() and spread() pivot_longer() and pivot_wider(): condense multiple columns into one or the inverse separate() and unite(): split a column into multiple or the inverse 9.1.12 Other helpful tidyr functions slice(): choose a row pull(): choose a column Helper functions for select() (e.g., contains()) join family of functions: combine datasets based on a shared unique identifier union(): combine datasets by rows (column names must be the same) replace_na()/drop_na(): alter/remove rows with NA values 9.1.13 Helpful base R functions rbind() and cbind(): add rows/columns nrow() and ncol(): count rows/columns unique(): pull unique values Indexing with var$column and var[row, column] which() with column/row indexing 9.1.14 Other packages and functions tibble package for dataframes with tibble() kableExtra() for kable() tables ggplot2 package for graphs (cheat sheet here) factor() for ordering text labels in graphs Use na.rm = TRUE argument (e.g., in mean()) to remove NA values from calculations 9.2 Intermediate R Dealing with free-response text Dynamic variable creation and reference Helpful functions Other tips 9.2.1 Free-response text Regular expressions (cheat sheet here) Pattern matching Return position/value of elements that match a pattern: grep(), agrep() Return TRUE/FALSE: grepl(), agrepl(), str_detect() Change a pattern: sub(), gsub(), replace() Return position of pattern for all elements: regexpr(), gregexpr(), regexec() Use perl = TRUE argument to handle especially complex patterns 9.2.2 Free-response text # List of elements fruit &lt;- c(&quot;apple&quot;, &quot;banana&quot;, &quot;pear&quot;, &quot;pinapple&quot;) # grep position grep(pattern = &quot;le&quot;, x = fruit) ## [1] 1 4 # grep value grep(pattern = &quot;le&quot;, x = fruit, value = TRUE) ## [1] &quot;apple&quot; &quot;pinapple&quot; 9.2.3 Free-response text # agrep (can also specify value = TRUE) agrep(pattern = &quot;le&quot;, x = fruit, max.distance = 0.1) ## [1] 1 3 4 # regexpr # match.length attribute gives starting position of match # index.type attribute gives length of matched text regexpr(pattern = &quot;le&quot;, text = fruit) ## [1] 4 -1 -1 7 ## attr(,&quot;match.length&quot;) ## [1] 2 -1 -1 2 ## attr(,&quot;index.type&quot;) ## [1] &quot;chars&quot; ## attr(,&quot;useBytes&quot;) ## [1] TRUE 9.2.4 Dynamic variables # Variables vals &lt;- rep(1:3, 3) name &lt;- &quot;assign_example&quot; # Assign values to variable name assign(name, vals) # Use the variable as usual assign_example ## [1] 1 2 3 1 2 3 1 2 3 9.2.5 Dynamic variables # You can also get the new variable from the name get(name) ## [1] 1 2 3 1 2 3 1 2 3 # You can add to this variable dynamically as well assign(name, c(get(name), 4:6)) # New output assign_example ## [1] 1 2 3 1 2 3 1 2 3 4 5 6 9.2.6 Helpful functions apply(), lapply(), sapply(), tapply() source() variables from R scripts %notin% and %in% (compared to != and ==) # Example using apply(): go across columns of dataset # and substitute characters language &lt;- apply(language, 2, function(x) gsub(&quot;\\\\\\\\&quot;, &quot;&quot;, x, fixed = TRUE)) # Source other sripts source(&quot;data_cleaning.R&quot;, local = TRUE) # Helper function &quot;%notin%&quot; &lt;- Negate(&quot;%in%&quot;) # Example from processing pipeline for Qualtrics data unusable &lt;- c(&quot;0&quot;,&quot;00&quot;,&quot;107&quot;) dat %&gt;% dplyr::filter(Progress==100 &amp; ID %notin% unusable) 9.2.7 Other tips Store ggplot2 parameters in a list() list() vs. c() "]
]
